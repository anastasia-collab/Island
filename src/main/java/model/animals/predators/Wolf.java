package model.animals.predators;

import model.Location;
import model.animals.Animal;
import model.animals.Predator;
import model.animals.herbivores.*;
import utils.SimulationSettings;

import java.util.List;
import java.util.stream.Collectors;

public class Wolf extends Predator {

    public Wolf() {
        super(SimulationSettings.AnimalConfig.WOLF); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
        // - weight: 50 –∫–≥ (–ø—Ä–∏–º–µ—Ä)
        // - maxSpeed: 3 –∫–ª–µ—Ç–∫–∏/—Ö–æ–¥
        // - foodNeeded: 8 –∫–≥/–¥–µ–Ω—å
        // - maxPopulation: 30 –≤ –ª–æ–∫–∞—Ü–∏–∏
    }

    @Override
    protected List<Animal> getPotentialFood(Location location) {
        return location.getAnimals().stream()
                // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª–∞—Å—Å–∞–º-–∂–µ—Ä—Ç–≤–∞–º (–≤—Å–µ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ)
                .filter(a -> a instanceof Rabbit || a instanceof Mouse
                        || a instanceof Goat || a instanceof Sheep
                        || a instanceof Horse || a instanceof Deer
                        || a instanceof Boar || a instanceof Buffalo
                        || a instanceof Duck)
                // –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –º–µ—Ä—Ç–≤—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
                .filter(Animal::isAlive)
                .collect(Collectors.toList());
    }

    @Override
    protected int getEatingProbability(Animal prey) {
        // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø—É –∂–µ—Ä—Ç–≤—ã:
        if (prey instanceof Rabbit) return SimulationSettings.EatingChance.WOLF_RABBIT;    // 60%
        if (prey instanceof Mouse) return SimulationSettings.EatingChance.WOLF_MOUSE;     // 80%
        if (prey instanceof Goat) return SimulationSettings.EatingChance.WOLF_GOAT;       // 40%
        if (prey instanceof Sheep) return SimulationSettings.EatingChance.WOLF_SHEEP;     // 70%
        if (prey instanceof Horse) return SimulationSettings.EatingChance.WOLF_HORSE;     // 10%
        if (prey instanceof Deer) return SimulationSettings.EatingChance.WOLF_DEER;       // 15%
        if (prey instanceof Boar) return SimulationSettings.EatingChance.WOLF_BOAR;       // 15%
        if (prey instanceof Buffalo) return SimulationSettings.EatingChance.WOLF_BUFFALO; // 20%
        if (prey instanceof Duck) return SimulationSettings.EatingChance.WOLF_DUCK;       // 40%
        return 0; // –î–ª—è –Ω–µ—É—á—Ç–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
    }

    @Override
    protected Animal createOffspring() {
        return new Wolf(); // –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    }

    @Override
    public String getEmoji() {
        return "üê∫"; // Unicode: U+1F43A
    }

    @Override
    public boolean isPredator() {
        return true;
    }
}