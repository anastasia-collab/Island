package statistics;

import model.animals.Animal;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏.
 */
public class Statistics {
    private static final AtomicInteger totalDeathsByHunger = new AtomicInteger(0);
    private static final AtomicInteger totalDeathsByPredation = new AtomicInteger(0);
    private static final AtomicInteger deathsByHungerToday = new AtomicInteger(0);
    private static final AtomicInteger totalBirths = new AtomicInteger(0);
    private static final AtomicInteger totalPlants = new AtomicInteger(0);

    private static final Map<Class<? extends Animal>, AtomicInteger> currentPopulation = new ConcurrentHashMap<>();

    // === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π ===

    public static void recordDeathByHunger(Animal animal) {
        totalDeathsByHunger.incrementAndGet();
        deathsByHungerToday.incrementAndGet();
        decreasePopulation(animal);
    }

    public static void recordDeathByPredation(Animal animal) {
        totalDeathsByPredation.incrementAndGet();
        decreasePopulation(animal);
    }

    public static void recordBirth(Animal animal) {
        totalBirths.incrementAndGet();
        increasePopulation(animal);
    }

    public static void updatePlants(int total) {
        totalPlants.set(total);
    }

    public static void increasePopulation(Animal animal) {
        currentPopulation
                .computeIfAbsent(animal.getClass(), k -> new AtomicInteger(0))
                .incrementAndGet();
    }

    public static void decreasePopulation(Animal animal) {
        currentPopulation
                .computeIfAbsent(animal.getClass(), k -> new AtomicInteger(0))
                .decrementAndGet();
    }

    public static void resetDailyHungerDeaths() {
        deathsByHungerToday.set(0);
    }

    public static int getDeathsByHungerCount() {
        return deathsByHungerToday.get();
    }

    // === –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===

    public static void printStatistics() {
        System.out.println("\nüìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===");
        System.out.println("üåø –†–∞—Å—Ç–µ–Ω–∏–π –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ : " + totalPlants.get());
        System.out.println("üíÄ –°–º–µ—Ä—Ç–µ–π –æ—Ç –≥–æ–ª–æ–¥–∞    : " + totalDeathsByHunger.get());
        System.out.println("ü©∏ –°–º–µ—Ä—Ç–µ–π –æ—Ç —Ö–∏—â–Ω–∏–∫–æ–≤  : " + totalDeathsByPredation.get());
        System.out.println("üê£ –í—Å–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏–π       : " + totalBirths.get());
        System.out.println("üìã –ü–æ–ø—É–ª—è—Ü–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö:");

        for (Map.Entry<Class<? extends Animal>, AtomicInteger> entry : currentPopulation.entrySet()) {
            Class<? extends Animal> clazz = entry.getKey();
            int count = entry.getValue().get();
            String emoji = "?";
            String name = clazz.getSimpleName();

            try {
                Animal animal = clazz.getDeclaredConstructor().newInstance();
                emoji = animal.getEmoji();
            } catch (Exception ignored) {}

            String displayCount = (count <= 0) ? "–í—ã–º–µ—Ä–ª–∏" : String.valueOf(count);
            System.out.printf("   %s %-12s : %s%n", emoji, name, displayCount);
        }

        System.out.println("========================\n");
    }
}
